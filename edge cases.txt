DECLARE
  acting_admin_id INTEGER;
  action_desc TEXT;
  admin_id_setting TEXT;
BEGIN
  -- Try to get admin ID from session variable
  admin_id_setting := current_setting('app.current_admin_id', true);

  -- If session variable is missing or empty, use fallback admin
  IF admin_id_setting IS NULL OR admin_id_setting = '' THEN
    SELECT admin_id INTO acting_admin_id FROM admins ORDER BY admin_id LIMIT 1;
    IF acting_admin_id IS NULL THEN
      RETURN OLD; -- No admin found, skip logging but allow deletion
    END IF;
  ELSE
    BEGIN
      acting_admin_id := admin_id_setting::INTEGER;
    EXCEPTION WHEN OTHERS THEN
      -- If casting fails, fallback to default admin
      SELECT admin_id INTO acting_admin_id FROM admins ORDER BY admin_id LIMIT 1;
      IF acting_admin_id IS NULL THEN
        RETURN OLD; -- No admin found, skip logging but allow deletion
      END IF;
    END;
  END IF;

  -- Log the deletion BEFORE it happens so the user still exists
  action_desc := 'Deleted user: ' || OLD.username;
  INSERT INTO admin_logs (
    admin_id, action_type, description, affected_user_id, created_at
  ) VALUES (
    acting_admin_id, 'DELETE_USER', action_desc, OLD.user_id, CURRENT_TIMESTAMP
  );

  RETURN OLD; -- Allow the deletion to proceed
END;
